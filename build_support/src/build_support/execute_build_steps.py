"""The entry point into running build tools.

Attributes:
    | CLI_ARG_TO_TASK: A dictionary of the CLI arg to the corresponding task to run.
"""

from argparse import ArgumentParser, Namespace
from pathlib import Path

from build_support.ci_cd_tasks.build_tasks import BuildAll, BuildDocs, BuildPypi
from build_support.ci_cd_tasks.env_setup_tasks import (
    Clean,
    SetupDevEnvironment,
    SetupProdEnvironment,
    SetupPulumiEnvironment,
)
from build_support.ci_cd_tasks.lint_tasks import (
    ApplyRuffFixUnsafe,
    Lint,
    RuffFixSafe,
)
from build_support.ci_cd_tasks.push_tasks import PushAll, PushPypi
from build_support.ci_cd_tasks.task_node import BasicTaskInfo, TaskNode
from build_support.ci_cd_tasks.validation_tasks import (
    ValidateAll,
    ValidateBuildSupport,
    ValidatePypi,
    ValidatePythonStyle,
)
from build_support.dag_engine import run_tasks
from build_support.new_project_setup.setup_new_project import MakeProjectFromTemplate
from build_support.process_runner import concatenate_args, run_process

#######################################################################################
# Test tasks use the word "Validate" instead of "Test" in their name to prevent
# pytest from getting confused and producing lots of warnings.  However, for the sake
# of standardization and usability we will use "test" instead of "validate" for the
# exposed CLI options and Makefile commands.
#######################################################################################

CLI_ARG_TO_TASK: dict[str, type[TaskNode]] = {
    "make_new_project": MakeProjectFromTemplate,
    "clean": Clean,
    "setup_dev_env": SetupDevEnvironment,
    "setup_prod_env": SetupProdEnvironment,
    "setup_pulumi_env": SetupPulumiEnvironment,
    "test_style": ValidatePythonStyle,
    "test_build_support": ValidateBuildSupport,
    "test_pypi": ValidatePypi,
    "test": ValidateAll,
    "lint": Lint,
    "ruff_fix_safe": RuffFixSafe,
    "apply_unsafe_ruff_fixes": ApplyRuffFixUnsafe,
    "build_pypi": BuildPypi,
    "build_docs": BuildDocs,
    "build": BuildAll,
    "push_pypi": PushPypi,
    "push": PushAll,
}


def fix_permissions(local_user_uid: int, local_user_gid: int) -> None:
    """Resets all file ownership to the local user after running processes.

    Args:
        local_user_uid (int): The user's OS user ID.
        local_user_gid (int): The user's OS group ID.

    Returns:
        None
    """
    local_user = f"{local_user_uid}:{local_user_gid}"
    run_process(
        args=concatenate_args(
            args=[
                "chown",
                "-R",
                local_user,
                [
                    path.absolute()
                    for path in Path(__file__).parent.parent.parent.parent.glob("*")
                    if path.name != ".git"
                ],
            ],
        ),
        silent=True,
    )


def parse_args(args: list[str] | None = None) -> Namespace:
    """Parses arguments from list given or the command line.

    Args:
        args (list[str] | None): Args to parse.  Defaults to None, causing
            sys.argv[1:] to be used.

    Returns:
        Namespace: A namespace made from the parsed args.
    """
    parser = ArgumentParser(
        prog="ExecuteBuildSteps",
        description="This tool exists to facilitate building, testing, "
        "and deploying this project's artifacts",
    )
    parser.add_argument(
        "build_tasks",
        type=str,
        nargs="+",
        help="Build tasks to run.",
        choices=CLI_ARG_TO_TASK.keys(),
    )
    parser.add_argument(
        "--non-docker-project-root",
        type=Path,
        required=True,
        help="Path to project root on local machine, used to mount project "
        "when launching docker containers.",
    )
    parser.add_argument(
        "--docker-project-root",
        type=Path,
        required=True,
        help="Path to project root on docker machines, used to mount project "
        "when launching docker containers.",
    )
    parser.add_argument(
        "--user-id",
        type=int,
        required=True,
        help="User ID, used to return files made by docker to owner.",
    )
    parser.add_argument(
        "--group-id",
        type=int,
        required=True,
        help="User's Group ID, used to return files made by docker to owner.",
    )
    return parser.parse_args(args=args)


def run_main(args: Namespace) -> None:
    """Runs the logic for the execute_build_steps main.

    Args:
        args (Namespace): A namespace generated by an ArgumentParser.

    Returns:
        None
    """
    non_docker_project_root = args.non_docker_project_root
    docker_project_root = args.docker_project_root
    local_user_uid = args.user_id
    local_user_gid = args.group_id
    requested_tasks = [
        CLI_ARG_TO_TASK[arg](
            basic_task_info=BasicTaskInfo(
                non_docker_project_root=non_docker_project_root,
                docker_project_root=docker_project_root,
                local_user_uid=local_user_uid,
                local_user_gid=local_user_gid,
            )
        )
        for arg in args.build_tasks
    ]
    try:
        run_tasks(tasks=requested_tasks)
    except Exception as e:
        print(e)  # noqa: T201
    finally:
        fix_permissions(local_user_uid=args.user_id, local_user_gid=args.group_id)


if __name__ == "__main__":  # pragma: no cover - main
    run_main(args=parse_args())
